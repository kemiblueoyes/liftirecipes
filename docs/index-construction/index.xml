<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LIFTI – Index Construction</title>
    <link>https://mikegoatly.github.io/lifti/docs/index-construction/</link>
    <description>Recent content in Index Construction on LIFTI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://mikegoatly.github.io/lifti/docs/index-construction/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: WithDefaultTokenizationOptions</title>
      <link>https://mikegoatly.github.io/lifti/docs/index-construction/withdefaulttokenizationoptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/index-construction/withdefaulttokenizationoptions/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;FullTextIndexBuilder&amp;lt;TKey&amp;gt; WithDefaultTokenizationOptions(Func&amp;lt;TokenizationOptionsBuilder, TokenizationOptionsBuilder&amp;gt; optionsBuilder)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;example-usage&#34;&gt;Example usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FullTextIndexBuilder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WithDefaultTokenizationOptions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AccentInsensitive&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Default
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CaseInsensitive&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Default
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SplitOnPunctuation&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Default
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SplitOnCharacters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WithStemming&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;XmlContent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tokenizationoptionsbuilder-methods&#34;&gt;TokenizationOptionsBuilder methods&lt;/h2&gt;
&lt;h3 id=&#34;word-break-modifiers&#34;&gt;Word break modifiers&lt;/h3&gt;
&lt;p&gt;A tokenizer will always break words on separator (&lt;code&gt;Char.IsSeparator&lt;/code&gt;) or control (&lt;code&gt;Char.IsControl&lt;/code&gt;) characters.&lt;/p&gt;
&lt;h4 id=&#34;splitonpunctuationbool&#34;&gt;&lt;code&gt;SplitOnPunctuation(bool)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;: &lt;strong&gt;Default&lt;/strong&gt; The tokenizer will split words on punctuation characters (e.g. those that match &lt;code&gt;Char.IsPunctuation(char)&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;false&lt;/code&gt;: Only characters explicitly specified using &lt;code&gt;SplitOnCharacters&lt;/code&gt; will be treated as word breaks.&lt;/p&gt;
&lt;h4 id=&#34;splitoncharactersparams-char&#34;&gt;&lt;code&gt;SplitOnCharacters(params char[])&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Allows for additional characters to cause word breaks for a tokenizer. E.g. &lt;code&gt;SplitOnCharacters(&#39;$&#39;, &#39;£&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;text-normalization&#34;&gt;Text Normalization&lt;/h3&gt;
&lt;h4 id=&#34;accentinsensitivebool&#34;&gt;&lt;code&gt;AccentInsensitive(bool)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;: &lt;strong&gt;Default&lt;/strong&gt; The tokenizer will normalize characters with diacritics to common form. e.g. &lt;code&gt;aigües&lt;/code&gt; and &lt;code&gt;aigues&lt;/code&gt; will be equivalent. 
Additionally, characters that can be logically expressed as two characters are expanded, e.g. &lt;code&gt;laering&lt;/code&gt; will be equivalent to &lt;code&gt;læring&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;false&lt;/code&gt;: The tokenizer will be accent sensitive. Searching for &lt;code&gt;aigües&lt;/code&gt; will not match &lt;code&gt;aigues&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;caseinsensitivebool&#34;&gt;&lt;code&gt;CaseInsensitive(bool)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;: &lt;strong&gt;Default&lt;/strong&gt; The tokenizer will normalize all characters to uppercase. e.g. &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt; will be equivalent.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;false&lt;/code&gt;: The tokenizer will be case sensitive. Searching for &lt;code&gt;Cat&lt;/code&gt; will match &lt;code&gt;Cat&lt;/code&gt; but not &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;withstemmingbool&#34;&gt;&lt;code&gt;WithStemming(bool)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;: Words will be stemmed using an implementation of the Porter Stemmer algorithm. For example, &lt;code&gt;ABANDON&lt;/code&gt;, &lt;code&gt;ABANDONED&lt;/code&gt; and &lt;code&gt;ABANDONING&lt;/code&gt; will all
be treated as &lt;code&gt;ABANDON&lt;/code&gt;. Currently only English is supported.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;false&lt;/code&gt;: &lt;strong&gt;Default&lt;/strong&gt; No stemming will be performed on words.&lt;/p&gt;
&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;
&lt;p&gt;By default, all text passed to a tokenizer will be treated as text that should be indexed. This behavior can be modified if required.&lt;/p&gt;
&lt;h4 id=&#34;xmlcontent&#34;&gt;&lt;code&gt;XmlContent()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Calling &lt;code&gt;XmlContent&lt;/code&gt; on the builder causes the tokenizer to treat the source text as XML, skipping any characters and text contained
within tags. This will also skip any attributes and attribute text in the XML, i.e. the only text that will be indexed will text nodes.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: WithDuplicateItemBehavior</title>
      <link>https://mikegoatly.github.io/lifti/docs/index-construction/withduplicateitembehavior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/index-construction/withduplicateitembehavior/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;FullTextIndexBuilder&amp;lt;TKey&amp;gt; WithDuplicateItemBehavior(DuplicateItemBehavior duplicateItemBehavior)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DuplicateItemBehavior.ReplaceItem&lt;/code&gt;: &lt;strong&gt;Default&lt;/strong&gt; The item will first be removed from the index, then indexed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DuplicateItemBehavior.ThrowException&lt;/code&gt;: An exception will be thrown. You can use this if you&amp;rsquo;re not expecting items to be re-indexed and want some indication that your code isn&amp;rsquo;t behaving correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;example-usage&#34;&gt;Example usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FullTextIndexBuilder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WithDuplicateItemBehavior&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DuplicateItemBehavior&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ThrowException&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: WithIndexModificationAction</title>
      <link>https://mikegoatly.github.io/lifti/docs/index-construction/withindexmodificationaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/index-construction/withindexmodificationaction/</guid>
      <description>
        
        
        &lt;p&gt;Every time an index is modified, either with a single document being added or a batch change being completed, a new immutable snapshot is created. 
This is part of LIFTI&amp;rsquo;s thread safety mechanism.&lt;/p&gt;
&lt;p&gt;You can hook into this process by registering an action using the &lt;code&gt;FullTextIndexBuilder&amp;lt;TKey&amp;gt;.WithIndexModificationAction&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;This trivial example just logs to the console the number of items in the index whenever a new snapshot is created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FullTextIndexBuilder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Guid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WithIndexModificationAction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;$&amp;#34;Index now contains {idx.IdLookup.Count} items&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also use this process to automatically serialize the index when modifications occur:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;serializer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BinarySerializer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Guid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;();&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FullTextIndexBuilder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Guid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WithIndexModificationAction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileStream&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OpenWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;myindex.dat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;serializer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SerializeAsync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileStream&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: </title>
      <link>https://mikegoatly.github.io/lifti/docs/index-construction/withobjecttokenization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/index-construction/withobjecttokenization/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
